@page "/departments"
@using HospitalManagement.Departments
@using Volo.Abp.Application.Dtos
@inject IDepartmentAppService DepartmentAppService
@inject IAuthorizationService AuthorizationService

<h3>Departman Yönetimi</h3>

@if (!canManageDepartments)
{
    <p class="text-danger">Departman yönetme yetkiniz yok.</p>
}
else
{
    <button class="btn btn-primary mb-2" @onclick="ShowCreateModal">+ Yeni Departman</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Ad</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dept in departments)
            {
                <tr>
                    <td>@dept.Name</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(dept)">Düzenle</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteDepartment(dept.Id)">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal -->
@if (showModal)
{
    <div class="modal fade show d-block" style="background-color:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-2" placeholder="Departman Adı" @bind="currentDepartment.Name" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Kapat</button>
                    <button class="btn btn-primary" @onclick="SaveDepartment">Kaydet</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DepartmentDto> departments = new();
    private bool canManageDepartments;
    private bool showModal = false;
    private string modalTitle = "";
    private DepartmentDto currentDepartment = new();

    protected override async Task OnInitializedAsync()
    {
        canManageDepartments = await AuthorizationService.IsGrantedAsync(HospitalManagementPermissions.Departments.Manage);
        if (canManageDepartments)
        {
            var result = await DepartmentAppService.GetListAsync(new PagedAndSortedResultRequestDto());
            departments = result.Items.ToList();
        }
    }

    private void ShowCreateModal()
    {
        modalTitle = "Yeni Departman";
        currentDepartment = new DepartmentDto();
        showModal = true;
    }

    private void ShowEditModal(DepartmentDto dept)
    {
        modalTitle = "Departman Düzenle";
        currentDepartment = new DepartmentDto
        {
            Id = dept.Id,
            Name = dept.Name
        };
        showModal = true;
    }

    private async Task SaveDepartment()
    {
        if (currentDepartment.Id == Guid.Empty)
        {
            var created = await DepartmentAppService.CreateAsync(new CreateUpdateDepartmentDto
            {
                Name = currentDepartment.Name
            });
            departments.Add(created);
        }
        else
        {
            var updated = await DepartmentAppService.UpdateAsync(currentDepartment.Id, new CreateUpdateDepartmentDto
            {
                Name = currentDepartment.Name
            });
            var index = departments.FindIndex(d => d.Id == currentDepartment.Id);
            if (index >= 0) departments[index] = updated;
        }

        CloseModal();
    }

    private async Task DeleteDepartment(Guid id)
    {
        await DepartmentAppService.DeleteAsync(id);
        departments.RemoveAll(d => d.Id == id);
    }

    private void CloseModal() => showModal = false;
}
